x-airflow-common: &airflow-common
  build: 
    context: .
    dockerfile: ./infrastructure/docker/airflow/Dockerfile
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__CORE__LOAD_EXAMPLES=false
    # Credentials for all tasks running within Airflow
    - AWS_ACCESS_KEY_ID=minioadmin
    - AWS_SECRET_ACCESS_KEY=minioadmin
    - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    # Airflow database connection
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    - MLFLOW_TRACKING_URI=http://mlflow:5000
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
  depends_on:
    - postgres
    - minio

services:
  postgres:
    image: postgres:13
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      # Credentials for MLflow DB
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
      - POSTGRES_DB=mlflow
      # Credentials for Airflow DB
      - POSTGRES_MULTIPLE_DATABASES=mlflow,airflow
      - POSTGRES_AIRFLOW_USER=airflow
      - POSTGRES_AIRFLOW_PASSWORD=airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Script to create multiple databases
      - ./scripts/setup/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow && pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2023-01-25T00-19-54Z
    container_name: minio_s3
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 2s
      retries: 5

  mlflow:
    build: ./infrastructure/docker/mlflow-server/
    container_name: mlflow_server
    ports:
      - "5000:5000"
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_DEFAULT_REGION=us-east-1
      - MLFLOW_S3_IGNORE_TLS=true
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  create-buckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      set -e;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/mlflow --ignore-existing;
      /usr/bin/mc mb myminio/delta --ignore-existing;
      /usr/bin/mc anonymous set-download myminio/mlflow;
      /usr/bin/mc anonymous set-download myminio/delta;
      exit 0;
      "

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--local"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/sh
    command: -c "airflow db init && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin"
    depends_on:
      postgres:
        condition: service_healthy
  
  fastapi-server:
    build:
      context: .
      dockerfile: ./infrastructure/docker/fastapi-server/Dockerfile
    container_name: fastapi_server
    ports:
      # Expose port 8001 on the host, mapping to 8000 in the container
      - "8001:8000"
    environment:
      # --- Configuration for MLflow Client and Boto3 ---
      # It needs to know how to find the MLflow server
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      # It needs credentials to download artifacts from MinIO
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      mlflow:
        condition: service_started
      minio:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      # Mount the configuration file
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - fastapi-server # Wait for the API to start before trying to scrape it

  pushgateway:
    image: prom/pushgateway:v1.8.0
    container_name: pushgateway
    ports:
      - "9091:9091"

  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      # Default user/pass: admin/admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      # Persist Grafana dashboards and settings
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  minio_data:
  grafana_data: